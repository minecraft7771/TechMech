package techmech.entity.mech;

import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.model.geom.ModelLayerLocation;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.PartPose;
import net.minecraft.client.model.geom.builders.*;
import net.minecraft.resources.ResourceLocation;
import techmech.TechMech;

/** Model of the mech. The content of this class is autogenerated Blockbench
 * @author minecraft7771
 * @param <E> Entity of the model
 */
public class MechModel<E extends Mech> extends EntityModel<E>
{
    // This layer location should be baked with EntityRendererProvider.Context in the entity renderer and passed into this model's constructor
    public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation(TechMech.MOD_ID, "mech"), "main");
    private final ModelPart body;
    private final ModelPart arm_left;
    private final ModelPart arm_right;
    private final ModelPart leg_right;
    private final ModelPart leg_left;
    private final ModelPart head;

    public MechModel(ModelPart root) {
        this.body = root.getChild("body");
        this.arm_left = root.getChild("arm_left");
        this.arm_right = root.getChild("arm_right");
        this.leg_right = root.getChild("leg_right");
        this.leg_left = root.getChild("leg_left");
        this.head = root.getChild("head");
    }

    public static LayerDefinition createBodyLayer() {
        MeshDefinition meshdefinition = new MeshDefinition();
        PartDefinition partdefinition = meshdefinition.getRoot();

        PartDefinition body = partdefinition.addOrReplaceChild("body", CubeListBuilder.create().texOffs(0, 60).addBox(-10.0F, -67.0F, 6.0F, 20.0F, 27.0F, 2.0F, new CubeDeformation(0.0F))
                .texOffs(0, 23).addBox(-10.0F, -40.0F, -8.0F, 20.0F, 2.0F, 16.0F, new CubeDeformation(0.0F))
                .texOffs(0, 0).addBox(-10.0F, -69.0F, -13.0F, 20.0F, 2.0F, 21.0F, new CubeDeformation(0.0F))
                .texOffs(92, 32).addBox(-6.0F, -64.0F, 8.0F, 12.0F, 21.0F, 1.0F, new CubeDeformation(0.0F))
                .texOffs(50, 41).addBox(-7.0F, -38.0F, -8.0F, 14.0F, 2.0F, 14.0F, new CubeDeformation(0.0F))
                .texOffs(86, 0).addBox(-3.0F, -36.0F, -6.0F, 6.0F, 9.0F, 9.0F, new CubeDeformation(0.0F))
                .texOffs(56, 36).addBox(-8.0F, -66.0F, -13.0F, 16.0F, 1.0F, 1.0F, new CubeDeformation(0.0F))
                .texOffs(56, 34).addBox(-8.0F, -64.0F, -13.0F, 16.0F, 1.0F, 1.0F, new CubeDeformation(0.0F))
                .texOffs(56, 32).addBox(-8.0F, -62.0F, -13.0F, 16.0F, 1.0F, 1.0F, new CubeDeformation(0.0F))
                .texOffs(63, 4).addBox(8.0F, -67.0F, -13.0F, 2.0F, 9.0F, 19.0F, new CubeDeformation(0.0F))
                .texOffs(49, 57).addBox(-10.0F, -67.0F, -13.0F, 2.0F, 9.0F, 19.0F, new CubeDeformation(0.0F))
                .texOffs(0, 89).addBox(8.0F, -58.0F, -7.0F, 2.0F, 18.0F, 13.0F, new CubeDeformation(0.0F))
                .texOffs(86, 87).addBox(-10.0F, -58.0F, -7.0F, 2.0F, 18.0F, 13.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 24.0F, 0.0F));

        PartDefinition b_left_bottom_r1 = body.addOrReplaceChild("b_left_bottom_r1", CubeListBuilder.create().texOffs(27, 72).addBox(8.0F, -3.0F, -24.0F, 2.0F, 7.0F, 17.0F, new CubeDeformation(0.0F))
                .texOffs(48, 85).addBox(-10.0F, -3.0F, -23.0F, 2.0F, 7.0F, 17.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, -1.1781F, 0.0F, 0.0F));

        PartDefinition shoulder_left = body.addOrReplaceChild("shoulder_left", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));

        PartDefinition ls_front_r1 = shoulder_left.addOrReplaceChild("ls_front_r1", CubeListBuilder.create().texOffs(111, 61).addBox(-18.0F, -22.0F, -9.0F, 12.0F, 1.0F, 2.0F, new CubeDeformation(0.0F))
                .texOffs(116, 13).addBox(-18.0F, -22.0F, 2.0F, 12.0F, 1.0F, 2.0F, new CubeDeformation(0.0F))
                .texOffs(78, 72).addBox(-18.0F, -24.0F, -9.0F, 13.0F, 2.0F, 13.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, 0.0F, 0.0F, -0.1745F));

        PartDefinition shoulder_right = body.addOrReplaceChild("shoulder_right", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));

        PartDefinition rs_back_r1 = shoulder_right.addOrReplaceChild("rs_back_r1", CubeListBuilder.create().texOffs(17, 96).addBox(6.0F, -22.0F, 2.0F, 12.0F, 1.0F, 2.0F, new CubeDeformation(0.0F))
                .texOffs(17, 99).addBox(6.0F, -22.0F, -9.0F, 12.0F, 1.0F, 2.0F, new CubeDeformation(0.0F))
                .texOffs(72, 57).addBox(5.0F, -24.0F, -9.0F, 13.0F, 2.0F, 13.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, 0.0F, 0.0F, 0.1745F));

        PartDefinition arm_left = partdefinition.addOrReplaceChild("arm_left", CubeListBuilder.create().texOffs(116, 100).addBox(-22.0F, -56.0F, -5.0F, 3.0F, 5.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(111, 47).addBox(-19.0F, -57.0F, -6.0F, 6.0F, 7.0F, 7.0F, new CubeDeformation(0.0F))
                .texOffs(58, 123).addBox(-18.0F, -50.0F, -5.0F, 4.0F, 11.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(36, 123).addBox(-19.0F, -39.0F, -20.0F, 6.0F, 7.0F, 5.0F, new CubeDeformation(0.0F)), PartPose.offset(32.0F, 24.0F, 0.0F));

        PartDefinition al_lower_arm_r1 = arm_left.addOrReplaceChild("al_lower_arm_r1", CubeListBuilder.create().texOffs(0, 120).addBox(-18.0F, 5.0F, -5.0F, 4.0F, 13.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(56, 109).addBox(-19.0F, -2.0F, -6.0F, 6.0F, 7.0F, 7.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, -1.1781F, 0.0F, 0.0F));

        PartDefinition arm_right = partdefinition.addOrReplaceChild("arm_right", CubeListBuilder.create().texOffs(0, 23).addBox(-13.0F, -56.0F, -5.0F, 3.0F, 5.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(30, 109).addBox(-19.0F, -57.0F, -6.0F, 6.0F, 7.0F, 7.0F, new CubeDeformation(0.0F))
                .texOffs(18, 123).addBox(-18.0F, -50.0F, -5.0F, 4.0F, 11.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(44, 60).addBox(-19.0F, -39.0F, -20.0F, 6.0F, 7.0F, 5.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 24.0F, 0.0F));

        PartDefinition ar_lower_arm_r1 = arm_right.addOrReplaceChild("ar_lower_arm_r1", CubeListBuilder.create().texOffs(95, 119).addBox(-18.0F, 5.0F, -5.0F, 4.0F, 13.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(105, 18).addBox(-19.0F, -2.0F, -6.0F, 6.0F, 7.0F, 7.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, -1.1781F, 0.0F, 0.0F));

        PartDefinition leg_right = partdefinition.addOrReplaceChild("leg_right", CubeListBuilder.create().texOffs(113, 124).addBox(-6.0F, -33.0F, -5.0F, 3.0F, 4.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(118, 32).addBox(-12.0F, -5.0F, -9.0F, 6.0F, 5.0F, 7.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 24.0F, 2.0F));

        PartDefinition lr_knee_r1 = leg_right.addOrReplaceChild("lr_knee_r1", CubeListBuilder.create().texOffs(109, 111).addBox(-12.0F, 21.0F, -2.0F, 6.0F, 6.0F, 7.0F, new CubeDeformation(0.0F))
                .texOffs(77, 118).addBox(-11.0F, 11.0F, -1.0F, 4.0F, 13.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(116, 0).addBox(-12.0F, 5.0F, -2.0F, 6.0F, 6.0F, 7.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, -0.5236F, 0.0F, 0.0F));

        PartDefinition lr_lower_r1 = leg_right.addOrReplaceChild("lr_lower_r1", CubeListBuilder.create().texOffs(61, 0).addBox(-11.0F, 17.0F, -20.0F, 4.0F, 15.0F, 5.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, 0.3491F, 0.0F, 0.0F));

        PartDefinition leg_left = partdefinition.addOrReplaceChild("leg_left", CubeListBuilder.create().texOffs(124, 16).addBox(-15.0F, -33.0F, -5.0F, 3.0F, 4.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(117, 65).addBox(-12.0F, -5.0F, -9.0F, 6.0F, 5.0F, 7.0F, new CubeDeformation(0.0F)), PartPose.offset(18.0F, 24.0F, 2.0F));

        PartDefinition ll_knee_r1 = leg_left.addOrReplaceChild("ll_knee_r1", CubeListBuilder.create().texOffs(69, 87).addBox(-12.0F, 21.0F, -2.0F, 6.0F, 6.0F, 7.0F, new CubeDeformation(0.0F))
                .texOffs(0, 41).addBox(-11.0F, 11.0F, -1.0F, 4.0F, 13.0F, 5.0F, new CubeDeformation(0.0F))
                .texOffs(103, 87).addBox(-12.0F, 5.0F, -2.0F, 6.0F, 6.0F, 7.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, -0.5236F, 0.0F, 0.0F));

        PartDefinition ll_lower_r1 = leg_left.addOrReplaceChild("ll_lower_r1", CubeListBuilder.create().texOffs(0, 0).addBox(-11.0F, 17.0F, -20.0F, 4.0F, 15.0F, 5.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(0.0F, -39.0F, 0.0F, 0.3491F, 0.0F, 0.0F));

        PartDefinition head = partdefinition.addOrReplaceChild("head", CubeListBuilder.create().texOffs(0, 41).addBox(-8.0F, -70.0F, -12.0F, 16.0F, 1.0F, 18.0F, new CubeDeformation(0.0F))
                .texOffs(0, 33).addBox(-5.0F, -71.0F, -1.0F, 4.0F, 1.0F, 4.0F, new CubeDeformation(0.0F))
                .texOffs(13, 0).addBox(-4.0F, -74.0F, 0.0F, 2.0F, 3.0F, 2.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 24.0F, 0.0F));

        return LayerDefinition.create(meshdefinition, 256, 256);
    }

    @Override
    public void setupAnim(E entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {

    }

    @Override
    public void renderToBuffer(PoseStack poseStack, VertexConsumer vertexConsumer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
        body.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
        arm_left.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
        arm_right.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
        leg_right.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
        leg_left.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
        head.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
    }
}
